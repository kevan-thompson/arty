#*****************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# project_1.tcl: Tcl script for re-creating project 'project_2'
#
# Generated by Vivado on Tue Sep 21 18:39:08 -0700 2021
# IP Build 2700528 on Thu Nov  7 00:09:20 MST 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (project_1.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/new/flip_flop.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/new/full_adder.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/new/full_adder2.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/new/simple_state.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/new/detector.v"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/sources_1/bd/design_1/ip/design_1_mig_7series_0_1/board.prj"
#    "C:/Users/Kevan/Desktop/netint_test_results/project_2/project_2.srcs/constrs_1/imports/arty_master_xdc/Arty_Master.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/Users/Kevan/Desktop/Verilog Files/buffer_and_mux.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/buffer_mux_encoding.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/data_buffer.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/first_bit.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/register_b.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/netint_test.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/data_decoder.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/data_select.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/sd1.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/sd2.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/fa1.v"
#    "C:/Users/Kevan/Desktop/Verilog Files/rca.v"
#    "C:/Users/Kevan/Desktop/arty_simle_design_2018.2/src/rotor_mux.vhd"
#    "C:/Users/Kevan/Desktop/arty_simle_design_2018.2/src/rotor_shift_reg.vhd"
#    "C:/Users/Kevan/Desktop/arty_simle_design_2018.2/src/rotor.vhd"
#    "C:/Users/Kevan/Desktop/Verilog Files/fa2.v"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "project_1"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "project_1.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/project_1"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a35ticsg324-1L

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a35ticsg324-1L" -objects $obj
set_property -name "platform.num_compute_units" -value "16" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "3" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "3" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "3" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "3" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "3" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "3" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "3" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj
set_property -name "xsim.array_display_limit" -value "64" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../arty_simle_design_2018.2/ip_repo/range_finder_1.0"] D:/Xilinx/ARM Repo" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../src/buffer_and_mux.v"] \
 [file normalize "${origin_dir}/../src/buffer_mux_encoding.v"] \
 [file normalize "${origin_dir}/../src/data_buffer.v"] \
 [file normalize "${origin_dir}/../src/first_bit.v"] \
 [file normalize "${origin_dir}/../src/register_b.v"] \
 [file normalize "${origin_dir}/../src/netint_test.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
add_files -fileset constrs_1 -norecurse ${origin_dir}/Arty_Master.xdc


# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a35ticsg324-1L" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]





# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# netint_test



  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:ip:util_vector_logic:2.0\
  xilinx.com:ip:vio:3.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  netint_test\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set CLK100MHZ [ create_bd_port -dir I -type clk -freq_hz 100000000 CLK100MHZ ]
  set ck_rst [ create_bd_port -dir I ck_rst ]

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKOUT2_JITTER {114.829} \
   CONFIG.CLKOUT2_PHASE_ERROR {98.575} \
   CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {200.000} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.CLKOUT3_JITTER {175.402} \
   CONFIG.CLKOUT3_PHASE_ERROR {98.575} \
   CONFIG.CLKOUT3_REQUESTED_OUT_FREQ {25.000} \
   CONFIG.CLKOUT3_USED {true} \
   CONFIG.MMCM_CLKIN1_PERIOD {10.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {5} \
   CONFIG.MMCM_CLKOUT2_DIVIDE {40} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.NUM_OUT_CLKS {3} \
 ] $clk_wiz_0

  # Create instance: netint_test_0, and set properties
  set block_name netint_test
  set block_cell_name netint_test_0
  if { [catch {set netint_test_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $netint_test_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_0 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_0

  # Create instance: vio_0, and set properties
  set vio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:vio:3.0 vio_0 ]
  set_property -dict [ list \
   CONFIG.C_NUM_PROBE_IN {17} \
   CONFIG.C_NUM_PROBE_OUT {17} \
   CONFIG.C_PROBE_OUT0_WIDTH {16} \
   CONFIG.C_PROBE_OUT10_WIDTH {32} \
   CONFIG.C_PROBE_OUT11_WIDTH {32} \
   CONFIG.C_PROBE_OUT12_WIDTH {32} \
   CONFIG.C_PROBE_OUT13_WIDTH {32} \
   CONFIG.C_PROBE_OUT14_WIDTH {32} \
   CONFIG.C_PROBE_OUT15_WIDTH {32} \
   CONFIG.C_PROBE_OUT16_WIDTH {32} \
   CONFIG.C_PROBE_OUT1_WIDTH {32} \
   CONFIG.C_PROBE_OUT2_WIDTH {32} \
   CONFIG.C_PROBE_OUT3_WIDTH {32} \
   CONFIG.C_PROBE_OUT4_WIDTH {32} \
   CONFIG.C_PROBE_OUT5_WIDTH {32} \
   CONFIG.C_PROBE_OUT6_WIDTH {32} \
   CONFIG.C_PROBE_OUT7_WIDTH {32} \
   CONFIG.C_PROBE_OUT8_WIDTH {32} \
   CONFIG.C_PROBE_OUT9_WIDTH {32} \
 ] $vio_0

  # Create port connections
  connect_bd_net -net CLK100MHZ_1 [get_bd_ports CLK100MHZ] [get_bd_pins clk_wiz_0/clk_in1]
  connect_bd_net -net ck_rst_1 [get_bd_ports ck_rst] [get_bd_pins util_vector_logic_0/Op1]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins netint_test_0/clk] [get_bd_pins vio_0/clk]
  connect_bd_net -net netint_test_0_b [get_bd_pins netint_test_0/b] [get_bd_pins vio_0/probe_in0]
  connect_bd_net -net netint_test_0_data_out_0 [get_bd_pins netint_test_0/data_out_0] [get_bd_pins vio_0/probe_in1]
  connect_bd_net -net netint_test_0_data_out_1 [get_bd_pins netint_test_0/data_out_1] [get_bd_pins vio_0/probe_in2]
  connect_bd_net -net netint_test_0_data_out_2 [get_bd_pins netint_test_0/data_out_2] [get_bd_pins vio_0/probe_in3]
  connect_bd_net -net netint_test_0_data_out_3 [get_bd_pins netint_test_0/data_out_3] [get_bd_pins vio_0/probe_in4]
  connect_bd_net -net netint_test_0_data_out_4 [get_bd_pins netint_test_0/data_out_4] [get_bd_pins vio_0/probe_in5]
  connect_bd_net -net netint_test_0_data_out_5 [get_bd_pins netint_test_0/data_out_5] [get_bd_pins vio_0/probe_in6]
  connect_bd_net -net netint_test_0_data_out_6 [get_bd_pins netint_test_0/data_out_6] [get_bd_pins vio_0/probe_in7]
  connect_bd_net -net netint_test_0_data_out_7 [get_bd_pins netint_test_0/data_out_7] [get_bd_pins vio_0/probe_in8]
  connect_bd_net -net netint_test_0_data_out_8 [get_bd_pins netint_test_0/data_out_8] [get_bd_pins vio_0/probe_in9]
  connect_bd_net -net netint_test_0_data_out_9 [get_bd_pins netint_test_0/data_out_9] [get_bd_pins vio_0/probe_in10]
  connect_bd_net -net netint_test_0_data_out_10 [get_bd_pins netint_test_0/data_out_10] [get_bd_pins vio_0/probe_in11]
  connect_bd_net -net netint_test_0_data_out_11 [get_bd_pins netint_test_0/data_out_11] [get_bd_pins vio_0/probe_in12]
  connect_bd_net -net netint_test_0_data_out_12 [get_bd_pins netint_test_0/data_out_12] [get_bd_pins vio_0/probe_in13]
  connect_bd_net -net netint_test_0_data_out_13 [get_bd_pins netint_test_0/data_out_13] [get_bd_pins vio_0/probe_in14]
  connect_bd_net -net netint_test_0_data_out_14 [get_bd_pins netint_test_0/data_out_14] [get_bd_pins vio_0/probe_in15]
  connect_bd_net -net netint_test_0_data_out_15 [get_bd_pins netint_test_0/data_out_15] [get_bd_pins vio_0/probe_in16]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins clk_wiz_0/reset] [get_bd_pins util_vector_logic_0/Res]
  connect_bd_net -net vio_1_probe_out0 [get_bd_pins netint_test_0/valids] [get_bd_pins vio_0/probe_out0]
  connect_bd_net -net vio_1_probe_out1 [get_bd_pins netint_test_0/data_in_0] [get_bd_pins vio_0/probe_out1]
  connect_bd_net -net vio_1_probe_out2 [get_bd_pins netint_test_0/data_in_1] [get_bd_pins vio_0/probe_out2]
  connect_bd_net -net vio_1_probe_out3 [get_bd_pins netint_test_0/data_in_2] [get_bd_pins vio_0/probe_out3]
  connect_bd_net -net vio_1_probe_out4 [get_bd_pins netint_test_0/data_in_3] [get_bd_pins vio_0/probe_out4]
  connect_bd_net -net vio_1_probe_out5 [get_bd_pins netint_test_0/data_in_4] [get_bd_pins vio_0/probe_out5]
  connect_bd_net -net vio_1_probe_out6 [get_bd_pins netint_test_0/data_in_5] [get_bd_pins vio_0/probe_out6]
  connect_bd_net -net vio_1_probe_out7 [get_bd_pins netint_test_0/data_in_6] [get_bd_pins vio_0/probe_out7]
  connect_bd_net -net vio_1_probe_out8 [get_bd_pins netint_test_0/data_in_7] [get_bd_pins vio_0/probe_out8]
  connect_bd_net -net vio_1_probe_out9 [get_bd_pins netint_test_0/data_in_8] [get_bd_pins vio_0/probe_out9]
  connect_bd_net -net vio_1_probe_out10 [get_bd_pins netint_test_0/data_in_9] [get_bd_pins vio_0/probe_out10]
  connect_bd_net -net vio_1_probe_out11 [get_bd_pins netint_test_0/data_in_10] [get_bd_pins vio_0/probe_out11]
  connect_bd_net -net vio_1_probe_out12 [get_bd_pins netint_test_0/data_in_11] [get_bd_pins vio_0/probe_out12]
  connect_bd_net -net vio_1_probe_out13 [get_bd_pins netint_test_0/data_in_12] [get_bd_pins vio_0/probe_out13]
  connect_bd_net -net vio_1_probe_out14 [get_bd_pins netint_test_0/data_in_13] [get_bd_pins vio_0/probe_out14]
  connect_bd_net -net vio_1_probe_out15 [get_bd_pins netint_test_0/data_in_14] [get_bd_pins vio_0/probe_out15]
  connect_bd_net -net vio_1_probe_out16 [get_bd_pins netint_test_0/data_in_15] [get_bd_pins vio_0/probe_out16]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.546154",
   "Default View_TopLeft":"-357,0",
   "ExpandedHierarchyInLayout":"",
   "PinnedPorts":"",
   "guistr":"# # String gsaved with Nlview 7.0.21  2019-05-29 bk=1.5064 VDI=41 GEI=36 GUI=JA:9.0 non-TLS
#  -string -flagsOSRD
preplace port CLK100MHZ -pg 1 -lvl 0 -x 0 -y 120 -defaultsOSRD
preplace port ck_rst -pg 1 -lvl 0 -x 0 -y 60 -defaultsOSRD
preplace inst util_vector_logic_0 -pg 1 -lvl 1 -x 160 -y 60 -defaultsOSRD
preplace inst clk_wiz_0 -pg 1 -lvl 2 -x 390 -y 110 -defaultsOSRD
preplace inst netint_test_0 -pg 1 -lvl 4 -x 1050 -y 270 -defaultsOSRD
preplace inst vio_0 -pg 1 -lvl 3 -x 750 -y 280 -defaultsOSRD
preplace netloc microblaze_0_Clk 1 2 2 480 10 890
preplace netloc CLK100MHZ_1 1 0 2 NJ 120 NJ
preplace netloc ck_rst_1 1 0 1 NJ 60
preplace netloc util_vector_logic_0_Res 1 1 1 300J 60n
preplace netloc vio_1_probe_out0 1 3 1 N 120
preplace netloc vio_1_probe_out1 1 3 1 N 140
preplace netloc vio_1_probe_out2 1 3 1 N 160
preplace netloc vio_1_probe_out3 1 3 1 N 180
preplace netloc vio_1_probe_out4 1 3 1 N 200
preplace netloc vio_1_probe_out5 1 3 1 N 220
preplace netloc vio_1_probe_out6 1 3 1 N 240
preplace netloc vio_1_probe_out7 1 3 1 N 260
preplace netloc vio_1_probe_out8 1 3 1 N 280
preplace netloc vio_1_probe_out9 1 3 1 N 300
preplace netloc vio_1_probe_out10 1 3 1 N 320
preplace netloc vio_1_probe_out11 1 3 1 N 340
preplace netloc vio_1_probe_out12 1 3 1 N 360
preplace netloc vio_1_probe_out13 1 3 1 N 380
preplace netloc vio_1_probe_out14 1 3 1 N 400
preplace netloc vio_1_probe_out15 1 3 1 N 420
preplace netloc vio_1_probe_out16 1 3 1 N 440
preplace netloc netint_test_0_data_out_15 1 2 3 610 640 NJ 640 1210
preplace netloc netint_test_0_data_out_14 1 2 3 600 630 NJ 630 1220
preplace netloc netint_test_0_data_out_13 1 2 3 590 620 NJ 620 1230
preplace netloc netint_test_0_data_out_12 1 2 3 580 610 NJ 610 1240
preplace netloc netint_test_0_data_out_11 1 2 3 570 600 NJ 600 1250
preplace netloc netint_test_0_data_out_10 1 2 3 560 590 NJ 590 1260
preplace netloc netint_test_0_data_out_9 1 2 3 550 580 NJ 580 1270
preplace netloc netint_test_0_data_out_8 1 2 3 540 570 NJ 570 1280
preplace netloc netint_test_0_data_out_7 1 2 3 530 560 NJ 560 1290
preplace netloc netint_test_0_data_out_6 1 2 3 520 550 NJ 550 1300
preplace netloc netint_test_0_data_out_5 1 2 3 510 540 NJ 540 1310
preplace netloc netint_test_0_data_out_4 1 2 3 500 530 NJ 530 1320
preplace netloc netint_test_0_data_out_3 1 2 3 490 520 NJ 520 1330
preplace netloc netint_test_0_data_out_2 1 2 3 480 510 NJ 510 1340
preplace netloc netint_test_0_data_out_1 1 2 3 610 40 NJ 40 1210
preplace netloc netint_test_0_data_out_0 1 2 3 600 30 NJ 30 1220
preplace netloc netint_test_0_b 1 2 3 490 20 NJ 20 1340
levelinfo -pg 1 0 160 390 750 1050 1360
pagesize -pg 1 -db -bbox -sgen -130 0 1360 650
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_msg_id "BD_TCL-1000" "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_design_1()
cr_bd_design_1 ""
set_property GENERATE_SYNTH_CHECKPOINT "0" [get_files design_1.bd ] 
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a35ticsg324-1L -flow {Vivado Synthesis 2015} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2015" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7a35ticsg324-1L" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a35ticsg324-1L -flow {Vivado Implementation 2015} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2015" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7a35ticsg324-1L" -objects $obj
set_property -name "gen_full_bitstream" -value "0" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1

make_wrapper -files [get_files ${origin_dir}/project_1/project_1.srcs/sources_1/bd/design_1/design_1.bd] -top
add_files -norecurse ${origin_dir}/project_1/project_1.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.v
update_compile_order -fileset sources_1
set_property top design_1_wrapper [current_fileset]